---
import search from "../assets/search.svg";
---

<div class="absolute sm:w-9/12 top-1.5 flex flex-col">
  <form
    class="max-w-96 m-auto p-1 bg-neutral-700 rounded-full flex items-center justify-between w-full"
  >
    <input
      class="px-2 placeholder-stone-200 w-full rounded-full"
      placeholder="Search"
      autocomplete="off"
      id="search"
      required
      name="search"
    />
    <button class="cursor-pointer px-2">
      <img class="" src={search.src} alt="search icon" /></button
    >
  </form>
  <div
    id="results"
    class="max-w-96 bg-neutral-700 hidden p-1 mt-1 rounded-lg mx-auto w-full"
  >
    <!-- <div class="w-full flex justify-end">
      <button
        id="close"
        class="cursor-pointer mx-2 size-6 hover:bg-red-300 bg-red-500"
        aria-label="close">X</button
      >
    </div> -->
    <ul id="results-list" class="p-2 text-white max-w-2xl w-full"></ul>
  </div>
</div>

<script>
  import { actions } from "astro:actions";

  const form = document.querySelector("form");
  const input = document.getElementById("search") as HTMLInputElement | null;
  const resultsWrapper = document.getElementById("results");
  const resultsList = document.getElementById("results-list");

  document.addEventListener("click", function (event) {
    if (
      resultsWrapper &&
      event.target instanceof Node &&
      !resultsWrapper.contains(event.target) &&
      !input?.contains(event.target)
    ) {
      resultsWrapper.classList.add("hidden");
      // input?.blur();
    }
  });

  document.addEventListener("keydown", function (event) {
    if (event.key === "Escape") {
      resultsWrapper?.classList.add("hidden");
      // input?.blur();
    }
  });

  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    if (!form) return;

    const formData = new FormData(form);
    const searchTerm = formData.get("search");

    const filteredRecipes = await actions.search(formData);

    if (resultsList) {
      resultsList.innerHTML = "";
    }

    if (!filteredRecipes.data || filteredRecipes.data.length === 0) {
      resultsWrapper?.classList.add("hidden");
      return;
    }

    filteredRecipes.data.forEach((r) => {
      const li = document.createElement("li");

      const a = document.createElement("a");
      a.href = "/recipes/" + r.item.url;
      a.textContent = r.item.title ?? r.item.url ?? "Unnamed Recipe";
      a.classList.add(
        "block",
        // "text-sm",
        // "bg-zinc-800",
        // "text-zinc-200",
        // "text-white"
        "text-white",
        "hover:bg-neutral-600",
        "cursor-pointer",
        "rounded-lg",
        // "my-2",
        "px-3"
      );

      li.appendChild(a);
      resultsList?.appendChild(li);
    });

    // Show results
    resultsWrapper?.classList.remove("hidden");
  });
</script>
<style>
  dialog::backdrop {
    /* background-color: salmon; */
    /* filter: blur(30px); */
    backdrop-filter: blur(2px);
  }
</style>
